// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture   string          `json:"architecture"`
	ImageType      string          `json:"image_type"`
	UploadRequests []UploadRequest `json:"upload_requests"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Status string      `json:"status"`
	Type   UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
