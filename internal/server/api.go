// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Status string      `json:"status"`
	Type   UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
